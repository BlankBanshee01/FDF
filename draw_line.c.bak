plotLineLow(x0,y0, x1,y1)
  dx = x1 - x0
  dy = y1 - y0
  yi = 1
  if dy < 0
    yi = -1
    dy = -dy
  end if
  D = 2*dy - dx
  y = y0

  for x from x0 to x1
    plot(x,y)
    if D > 0
       y = y + yi
       D = D - 2*dx
    end if
    D = D + 2*dy
By switching the x and y axis an implementation for positive or negative steep gradients can be written as

plotLineHigh(x0,y0, x1,y1)
  dx = x1 - x0
  dy = y1 - y0
  xi = 1
  if dx < 0
    xi = -1
    dx = -dx
  end if
  D = 2*dx - dy
  x = x0

  for y from y0 to y1
    plot(x,y)
    if D > 0
       x = x + xi
       D = D - 2*dy
    end if
    D = D + 2*dx
A complete solution would need to detect whether x1 > x0 or y1 > y0 and reverse the input coordinates before drawing, thus

 plotLine(x0,y0, x1,y1)
  if abs(y1 - y0) < abs(x1 - x0)
    if x0 > x1
      plotLineLow(x1, y1, x0, y0)
    else
      plotLineLow(x0, y0, x1, y1)
    end if
  else
    if y0 > y1
      plotLineHigh(x1, y1, x0, y0)
    else
      plotLineHigh(x0, y0, x1, y1)
    end if
  end if




#include "fdf.h"

static void    plotLineLow(t_vect *vect, t_data *data)
{
	int dx;
	int dy;
	int yi;
	int D;
	int x;
	int y;

	dx = vect->x1 - vect->x0;
	dy = vect->y1 - vect->y0;
	yi = 1;
	if (dy < 0)
	{
		yi = -1;
		dy = -dy;
	}
	D = 2*dy - dx;
	y = vect->y0;

	x = vect->x0;
	while (x < vect->x1)
	{
		ft_color_pixel(x,y, data);
		if (D > 0)
		{
			y = y + yi;
			D = D - 2*dx;
		}
		D = D + 2*dy;
        x++;
	}
	printf("low\n");
}

static void    plotLineHigh(t_vect *vect, t_data *data)
{
	int dx;
	int dy;
	int D;
	int x;
	int xi;
	int y;

	dx = vect->x1 - vect->x0;
	dy = vect->y1 - vect->y0;
	xi = 1;
	if (dx < 0)
	{
		xi = -1;
		dx = -dx;
	}
	D = 2*dx - dy;
	x = vect->x0;
	y = vect->y0;
	while (y <= vect->y1)
	{
		ft_color_pixel(x,y, data);
		if (D > 0)
		{
			x = x + xi;
			D = D - 2*dy;
		}
		D = D + 2*dx;
        y++;
	}
}

void    plotLine(t_vect *vect, t_data *data)
{
	if (abs(vect->y1 - vect->y0) < abs(vect->x1 - vect->x0))
	{
		if (vect->x0 > vect->x1)
			plotLineLow(vect, data);
		else
			plotLineLow(vect, data);
	}
	else
	{
		if (vect->y0 > vect->y1)
			plotLineHigh(vect, data);
		else
			plotLineHigh(vect, data);
	}
}